<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="co.company.spring.dao.EmpMapper">

<!-- 단건조회  -->
	<select id="getEmp" parameterType="emp" resultType="emp">
		SELECT  employee_id,
				department_id,
				salary,
		        first_name,
				last_name,
				email,
				hire_date,
				job_id
		FROM employees
		WHERE employee_id = #{employeeId}
	</select>
	
	<update id="updateEmp">
		UPDATE EMPLOYEES
		<set>
			<if test="firstName != null">
				FIRST_NAME = #{firstName}
			</if>
		</set>
		WHERE EMPLOYEE_ID = #{employeeId}
	</update>
	
<!-- 부서별 사원 수 - 부서번호, 부서명, 사원수 -->
	<select id="getStatDept" resultType="map">
		SELECT A.DEPARTMENT_ID "deptId", <!-- 큰따옴표 안에 지정해주는 alias가 key가 됨-->
			   B.DEPARTMENT_NAME "deptName",
			   COUNT(*) "cnt"
		FROM EMPLOYEES A, DEPARTMENTS B
		WHERE A.DEPARTMENT_ID = B.DEPARTMENT_ID
		GROUP BY A.DEPARTMENT_ID, B.DEPARTMENT_NAME
	</select>
	
<!-- 전체 레코드 건수 조회 -->
	<select id="getCount" resultType="int">
		SELECT COUNT(*) FROM EMPLOYEES
	</select>
	
<!-- 전체조회  -->	
	<select id="getEmpList" resultType="emp"> <!-- parameterType은 생략 가능 -->
		SELECT * 
		  FROM employees
		<where>  
			<if test="firstName != null and firstName != ''"> <!-- String 타입이라서 nullString Check(firstName != '') -->
				LOWER(FIRST_NAME) like '%' || #{firstName} || '%'
			</if>
			<if test="departmentId != null and departmentId != ''">
				AND DEPARTMENT_ID = #{departmentId}
			</if>
<!-- 			<if test="minSalary != null and maxSalary != null">
				AND SALARY between #{minSalary} and #{maxSalary}
			</if> -->
			<if test="minSalary != null">
				AND SALARY >= #{minSalary}
			</if>
			<if test="maxSalary != null">
				<![CDATA[ AND SALARY <= #{maxSalary} ]]> <!-- 부등호<를 태그 여는 기호로 인식하기 때문에 c data <![CDATA[ ]]> 지정 -->
			</if>
        </where>	
		 ORDER BY first_name 
	</select>

<!-- 프로시저를 이용한 사원등록 -->
	<insert id="insertEmpProc" statementType="CALLABLE">
		{ call INS_EMP(
			<!-- in mode -->
			#{lastName},
			#{email},
			#{jobId},
			<!-- out mode -->
			#{msg, mode=OUT, jdbcType=VARCHAR, javaType=string},
			#{employeeId, mode=OUT, jdbcType=VARCHAR, javaType=string})
		}		
	</insert>

<!--  사원등록    -->
	<insert id="insertEmp" parameterType="emp">
	<selectKey order="BEFORE" keyProperty="employeeId" resultType="string">
		SELECT nvl(MAX(EMPLOYEE_ID),0)+1
		FROM EMPLOYEES
	</selectKey>
		INSERT INTO EMPLOYEES (	employee_id, 
								first_name, 
								last_name,
								email,
								hire_date,
								job_id
								)
	 	                VALUES( #{employeeId},
	 	               			#{firstName},
	 	               			#{lastName},
	 	               			#{email},
	 	               			#{hireDate},
	 	               			#{jobId})
	</insert>
	
	<!-- 단건 삭제 -->
	<delete id="deleteEmp">
		DELETE EMPLOYEES
		WHERE EMPLOYEE_ID = #{employeeId}
	</delete>	
	
	<!-- 여러 건 선택 삭제 -->
	<delete id="deleteMultiEmp">
		DELETE EMPLOYEES
		WHERE EMPLOYEE_ID IN
		<foreach collection="list" item="id" open="(" separator="," close=")">
			#{id}
		</foreach>
	</delete>
	
	<!-- jobid select option -->
	<select id="jobSelect" resultType="co.company.spring.dao.Jobs">
		SELECT JOB_ID, JOB_TITLE
		FROM JOBS
		ORDER BY JOB_ID
	</select>
	
	<!-- departmentId select option -->
	<select id="deptSelect" resultType="co.company.spring.dao.Dept">
		SELECT DEPARTMENT_ID, DEPARTMENT_NAME
		FROM DEPT
		ORDER BY DEPARTMENT_ID
	</select>

</mapper>
